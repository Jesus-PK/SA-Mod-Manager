<Application 
	x:Class="SAModManager.App"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:local="clr-namespace:SAModManager"
			 xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
			 xmlns:elements="clr-namespace:SAModManager.Controls"
			 xmlns:avalon="http://icsharpcode.net/sharpdevelop/avalonedit">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Themes/Themes.xaml" />
				<ResourceDictionary Source="Themes/DarkTheme.xaml" />
				<ResourceDictionary Source="Languages/Languages.xaml" />
				<ResourceDictionary Source="Languages/en-EN.xaml" />
				<ResourceDictionary Source="Icons/Icons.xaml"/>
			</ResourceDictionary.MergedDictionaries>

			<!--#region Styles & Overwrites-->
			<Image x:Key="ImageClose" Source="{StaticResource IconClose}"/>
			<!--#region Custom Title Bar-->
			
			<!--#endregion-->
			<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

			<Style x:Key="FocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			
			<!--#region Separator Styles-->
			<Style TargetType="{x:Type Separator}">
				<Setter Property="Background" Value="{DynamicResource Separator.Brushes.Background}"/>
			</Style>
			<!--#endregion-->

			<!--#region Tooltip Styles-->
			<Style TargetType="{x:Type ToolTip}">
				<Setter Property="Background" Value="{DynamicResource ToolTip.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource ToolTip.Brushes.Foreground}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource ToolTip.Brushes.Border}"/>
				<Setter Property="StaysOpen" Value="True"/>
			</Style>
			<!--#endregion-->
			
			<!--#region Text Elements Styles-->
			<Style TargetType="{x:Type TextBlock}">
				<Setter Property="Foreground" Value="{DynamicResource TextBlock.Brushes.Foreground}"/>
				<Setter Property="FontSize" Value="13"/>
				<Setter Property="FlowDirection" Value="{Binding Path=(local:FlowDirectionHelper.CurrentFlowDirection)}"/>
				<Setter Property="TextWrapping" Value="Wrap"/>
			</Style>
			<Style TargetType="Control">
				<Setter Property="Foreground" Value="{DynamicResource Control.Brushes.Foreground}"/>
			</Style>
			<Style x:Key="TextBoxStyling" TargetType="{x:Type TextBox}">
				<Setter Property="Background" Value="{DynamicResource TextBox.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource TextBox.Brushes.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource TextBlock.Brushes.Foreground}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
				<Setter Property="HorizontalContentAlignment" Value="Left"/>
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="AllowDrop" Value="true"/>
				<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="FlowDirection" Value="{Binding Path=(local:FlowDirectionHelper.CurrentFlowDirection)}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<Grid>
								<Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" CornerRadius="2">
									<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Opacity" TargetName="border" Value="0.56"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Brushes.MouseOver.Border}"/>
								</Trigger>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Brushes.Focus.Border}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
							<Condition Property="IsSelectionActive" Value="false"/>
						</MultiTrigger.Conditions>
						<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>
			<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyling}"/>
			<Style TargetType="{x:Type elements:NumberBox}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="{DynamicResource Borders.Brushes.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource TextBox.Brushes.Background}"/>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="BorderBrush" Value="{DynamicResource TextBox.Brushes.MouseOver.Border}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->

			<!--#region TextEditor-->
			<Style TargetType="{x:Type avalon:TextEditor}">
				<Setter Property="Background" Value="{DynamicResource TextEditor.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource TextEditor.Brushes.Foreground}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource TextEditor.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="FontSize" Value="14"/>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="BorderBrush" Value="{DynamicResource TextEditor.Brushes.MouseOver.Border}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->

			<!--#region Tab Style-->
			<Style TargetType="{x:Type TabControl}">
				<Setter Property="BorderBrush" Value="{DynamicResource TabControl.Brushes.Background}" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<Grid KeyboardNavigation.TabNavigation="Local">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<TabPanel IsItemsHost="True"/>
								<Border BorderThickness="0,2,0,0" 
										BorderBrush="{DynamicResource TabControl.Brushes.Selected}" 
										Grid.Row="1">
									<Grid Margin="0,5,0,0">
										<ContentPresenter x:Name="PART_Presenter" ContentSource="SelectedContent" HorizontalAlignment="Stretch"/>
										<Rectangle x:Name="PART_TempArea"/>
									</Grid>
								</Border>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type TabItem}">
				<Setter Property="Background" Value="{DynamicResource TabItem.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource TabItem.Brushes.Foreground}"/>
				<Setter Property="MinHeight" Value="30" />
				<Setter Property="MinWidth" Value="50" />
				<Setter Property="Padding" Value="10,0,10,0"/>
				<Setter Property="LayoutTransform">
					<Setter.Value>
						<ScaleTransform x:Name="scaleTransform" />
					</Setter.Value>
				</Setter>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabItem}">
							<Border BorderBrush="Transparent" Width="{TemplateBinding Width}" 
									Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
									CornerRadius="{DynamicResource TabItem.CornerRadius}">
								<TextBlock Text="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" ToolTip="{TemplateBinding Tag}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsSelected" Value="True">
									<Setter Property="Background" Value="{DynamicResource TabItem.Brushes.Selected.Background}" />
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource TabItem.Brushes.MouseOver.Background}"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="False"/>
										<Condition Property="IsSelected" Value="False"/>
									</MultiTrigger.Conditions>
									<Setter Property="Background" Value="{DynamicResource TabItem.Brushes.Control.Background}"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="True"/>
										<Condition Property="IsSelected" Value="True"/>
									</MultiTrigger.Conditions>
									<Setter Property="Background" Value="{DynamicResource TabItem.Brushes.Selected.Background}"/>
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
			
			<!--#region Combo Box Style-->
			<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="AllowDrop" Value="true"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="MinHeight" Value="0"/>
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<Border CornerRadius="{DynamicResource ComboBox.CornerRadius}">
								<ScrollViewer x:Name="PART_ContentHost" Background="{DynamicResource ComboBox.Brushes.Background}" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="ClickMode" Value="Press"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border x:Name="templateRoot" Background="{DynamicResource ComboBox.Brushes.Background}" BorderBrush="{DynamicResource ComboBox.Brushes.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="{DynamicResource ComboBox.CornerRadius}">
								<Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
									<Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{DynamicResource ComboBox.Brushes.Button.Image}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Editing.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.Editing.Button.Border}"/>
								</MultiDataTrigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ComboBox.Brushes.MouseOver.Button.Image}"/>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.MouseOver.Border}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.MouseOver.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.MouseOver.Editing.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.MouseOver.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.MouseOver.Editing.Button.Border}"/>
								</MultiDataTrigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ComboBox.Brushes.Pressed.Button.Image}"/>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Pressed.Border}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Pressed.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Pressed.Editing.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.Pressed.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.Pressed.Editing.Button.Border}"/>
								</MultiDataTrigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ComboBox.Brushes.Disabled.Button.Image}"/>
								</Trigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Disabled.Border}"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Disabled.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Brushes.Disabled.Editing.Border}"/>
									<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.Disabled.Editing.Background}"/>
									<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Brushes.Disabled.Editing.Button.Border}"/>
								</MultiDataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
				<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
					</Grid.ColumnDefinitions>
					<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
						<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
							<Border x:Name="dropDownBorder" Background="{DynamicResource ComboBox.Brushes.Background}" BorderBrush="{DynamicResource ComboBox.Brushes.Border}" BorderThickness="1">
								<ScrollViewer x:Name="DropDownScrollViewer">
									<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
										<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
										</Canvas>
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Grid>
								</ScrollViewer>
							</Border>
						</theme:SystemDropShadowChrome>
					</Popup>
					<ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
					<Border x:Name="border" Background="White" Margin="{TemplateBinding BorderThickness}">
						<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Opacity" TargetName="border" Value="0.56"/>
					</Trigger>
					<Trigger Property="IsKeyboardFocusWithin" Value="true">
						<Setter Property="Foreground" Value="Black"/>
					</Trigger>
					<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
						<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
						<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
					</Trigger>
					<Trigger Property="HasItems" Value="false">
						<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true"/>
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
					</MultiTrigger>
					<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
						<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
						<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
				<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
					</Grid.ColumnDefinitions>
					<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
						<theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
							<Border x:Name="dropDownBorder" Background="{DynamicResource ComboBox.Brushes.Background}" BorderBrush="{DynamicResource ComboBox.Brushes.Border}" BorderThickness="1">
								<ScrollViewer x:Name="DropDownScrollViewer">
									<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
										<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
										</Canvas>
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Grid>
								</ScrollViewer>
							</Border>
						</theme:SystemDropShadowChrome>
					</Popup>
					<ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
					<ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
						<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
						<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
					</Trigger>
					<Trigger Property="HasItems" Value="false">
						<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true"/>
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
					</MultiTrigger>
					<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
						<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
						<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<Style x:Key="MainComboBoxStyle" TargetType="{x:Type ComboBox}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource ComboBox.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Brushes.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource ComboBox.Brushes.Foreground}"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="HorizontalContentAlignment" Value="Left"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="Padding" Value="6,3,5,3"/>
				<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
				<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="FlowDirection" Value="{Binding Path=(local:FlowDirectionHelper.CurrentFlowDirection)}"/>
				<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>

				<Style.Triggers>
					<Trigger Property="IsEditable" Value="true">
						<Setter Property="IsTabStop" Value="false"/>
						<Setter Property="Padding" Value="2"/>
						<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style TargetType="ComboBox" BasedOn="{StaticResource MainComboBoxStyle}"/>
			<Style TargetType="{x:Type ComboBoxItem}">
				<Setter Property="Background" Value="{DynamicResource ComboBoxItem.Brushes.Background}"/>
				<Setter Property="FlowDirection" Value="{Binding Path=(local:FlowDirectionHelper.CurrentFlowDirection)}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBoxItem}">
							<Border Background="{TemplateBinding Background}">
								<ContentPresenter Margin="2"/>
							</Border>

						</ControlTemplate>
					</Setter.Value>
				</Setter>

				<Style.Triggers>

					<Trigger Property="IsHighlighted" Value="True">
						<Setter Property="Background" Value="{DynamicResource ComboBoxItem.Brushes.Highlighted.Background}"/>
					</Trigger>
					<Trigger Property="IsSelected" Value="True">
						<Setter Property="Background" Value="{DynamicResource ComboBoxItem.Brushes.Selected.Background}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->
			
			<!--#region Slider Style-->
			<Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
				<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
					<Path x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" Fill="{DynamicResource SliderThumb.Brushes.Background}" Stroke="{DynamicResource SliderThumb.Brushes.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Center"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Border}"/>
					</Trigger>
					<Trigger Property="IsDragging" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Border}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
				<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
					<Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{DynamicResource SliderThumb.Brushes.Background}" Stroke="{DynamicResource SliderThumb.Brushes.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Center"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Border}"/>
					</Trigger>
					<Trigger Property="IsDragging" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Border}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
				<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
					<Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{DynamicResource SliderThumb.Brushes.Background}" Stroke="{DynamicResource SliderThumb.Brushes.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Center"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Border}"/>
					</Trigger>
					<Trigger Property="IsDragging" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Border}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
				<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
					<Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z" Fill="{DynamicResource SliderThumb.Brushes.Background}" Stroke="{DynamicResource SliderThumb.Brushes.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" HorizontalAlignment="Center"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Border}"/>
					</Trigger>
					<Trigger Property="IsDragging" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Border}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
				<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
					<Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{DynamicResource SliderThumb.Brushes.Background}" Stroke="{DynamicResource SliderThumb.Brushes.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" HorizontalAlignment="Center"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Border}"/>
					</Trigger>
					<Trigger Property="IsDragging" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Border}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
				<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
					<Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{DynamicResource SliderThumb.Brushes.Background}" Stroke="{DynamicResource SliderThumb.Brushes.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" HorizontalAlignment="Center"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.MouseOver.Border}"/>
					</Trigger>
					<Trigger Property="IsDragging" Value="true">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Dragging.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Background}"/>
						<Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Brushes.Disabled.Border}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
				<Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
						<TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
						<Border x:Name="TrackBackground" Background="{DynamicResource SliderTrack.Brushes.Background}" BorderBrush="{DynamicResource SliderThumb.Brushes.Border}" BorderThickness="1" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
							<Canvas Margin="-6,-1">
								<Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden"/>
							</Canvas>
						</Border>
						<Track x:Name="PART_Track" Grid.Row="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11"/>
							</Track.Thumb>
						</Track>
					</Grid>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="TickPlacement" Value="TopLeft">
						<Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
						<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
						<Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
					</Trigger>
					<Trigger Property="TickPlacement" Value="BottomRight">
						<Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
						<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
						<Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
					</Trigger>
					<Trigger Property="TickPlacement" Value="Both">
						<Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
						<Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
					</Trigger>
					<Trigger Property="IsSelectionRangeEnabled" Value="true">
						<Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
					</Trigger>
					<Trigger Property="IsKeyboardFocused" Value="true">
						<Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>


			<ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
				<Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
						<TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
						<Border x:Name="TrackBackground" Background="{DynamicResource SliderTrack.Brushes.Background}" BorderBrush="{DynamicResource SliderTrack.Brushes.Border}" BorderThickness="1" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
							<Canvas Margin="-1,-6">
								<Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
							</Canvas>
						</Border>
						<Track x:Name="PART_Track" Grid.Column="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
							</Track.Thumb>
						</Track>
					</Grid>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="TickPlacement" Value="TopLeft">
						<Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
						<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalLeft}"/>
						<Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
					</Trigger>
					<Trigger Property="TickPlacement" Value="BottomRight">
						<Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
						<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalRight}"/>
						<Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
					</Trigger>
					<Trigger Property="TickPlacement" Value="Both">
						<Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
						<Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
					</Trigger>
					<Trigger Property="IsSelectionRangeEnabled" Value="true">
						<Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
					</Trigger>
					<Trigger Property="IsKeyboardFocused" Value="true">
						<Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<Style TargetType="{x:Type Slider}">
				<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
				<Setter Property="Background" Value="{DynamicResource Slider.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource Slider.Brushes.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource Slider.Brushes.Foreground}"/>
				<Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
				<Style.Triggers>
					<Trigger Property="Orientation" Value="Vertical">
						<Setter Property="Template" Value="{StaticResource SliderVertical}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->
			
			<!--#region List View Styles-->
			<Style TargetType="{x:Type ListView}">
				<Setter Property="Background" Value="{DynamicResource ListView.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource ListView.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Foreground" Value="#FF042271"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/> <!--TODO: Try to properly fix the horizontal scrollbar.-->
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
				<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListView}">
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ListView.CornerRadius}">
								<Border.OpacityMask>
									<VisualBrush Stretch="Fill">
										<VisualBrush.Visual>
											<Border
												Background="White"
												SnapsToDevicePixels="True"
												CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}}"
												Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
												Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}"/>
										</VisualBrush.Visual>
									</VisualBrush>
								</Border.OpacityMask>
								<ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type ListViewItem}">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Padding" Value="2,0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Grid>
								<Border x:Name="innerBorder" 
									  Background="{TemplateBinding Background}" 
									  Padding="{TemplateBinding Padding}" 
									  SnapsToDevicePixels="true" />
								<GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter TargetName="innerBorder" Property="Background" Value="{DynamicResource ListViewItem.Brushes.MouseOver.Background}"/>
								</Trigger>
								<Trigger Property="IsSelected" Value="True">
									<Setter TargetName="innerBorder" Property="Background" Value="{DynamicResource ListViewItem.Brushes.Selected.Background}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->

			<!--#region Button Styles-->
			<Style x:Key="MainButtonStyle" TargetType="{x:Type Button}">
				<Setter Property="Background" Value="{DynamicResource Button.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource Button.Brushes.Foreground}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="Padding" Value="1"/>
				<Setter Property="FlowDirection" Value="{Binding Path=(local:FlowDirectionHelper.CurrentFlowDirection)}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="border" CornerRadius="{DynamicResource Button.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
								<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Brushes.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Brushes.MouseOver.Border}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Brushes.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Brushes.Pressed.Border}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Brushes.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Brushes.Disabled.Border}"/>
									<Setter Property="Opacity" TargetName="border" Value="0.5"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Brushes.Disabled.Foreground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="WindowMinButton" TargetType="{x:Type Button}">
				<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.Foreground}"/>
				<Setter Property="ToolTip" Value="{DynamicResource Window.Tips.Minimize}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Grid Background="{TemplateBinding Background}" Height="32" Width="32" SnapsToDevicePixels="True">
								<Image Margin="10" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
									<Image.Source>
										<DrawingImage>
											<DrawingImage.Drawing>
												<DrawingGroup ClipGeometry="M0,0 V24 H24 V0 H0 Z">
													<GeometryDrawing Geometry="F1 M24,24z M0,0z M18,12L6.0000003,12">
														<GeometryDrawing.Pen>
															<Pen Brush="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" Thickness="2" StartLineCap="Round" EndLineCap="Round" LineJoin="Round" MiterLimit="1" />
														</GeometryDrawing.Pen>
													</GeometryDrawing>
												</DrawingGroup>
											</DrawingImage.Drawing>
										</DrawingImage>
									</Image.Source>
								</Image>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.MouseOver.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.MouseOver.Foreground}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.Pressed.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.Pressed.Foreground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="WindowMaxButton" TargetType="{x:Type Button}">
				<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.Foreground}"/>
				<Setter Property="ToolTip" Value="{DynamicResource Window.Tips.Maximize}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Grid Background="{TemplateBinding Background}" Height="32" Width="32" SnapsToDevicePixels="True">
								<Image x:Name="image" Margin="10" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
									<Image.Source>
										<DrawingImage>
											<DrawingImage.Drawing>
												<DrawingGroup ClipGeometry="M0,0 V24 H24 V0 H0 Z">
													<GeometryDrawing Geometry="F1 M24,24z M0,0z M4,6C4,4.89543,4.89543,4,6,4L18,4C19.1046,4,20,4.89543,20,6L20,18C20,19.1046,19.1046,20,18,20L6,20C4.89543,20,4,19.1046,4,18L4,6z">
														<GeometryDrawing.Pen>
															<Pen Brush="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Foreground}" Thickness="2" StartLineCap="Round" EndLineCap="Round" LineJoin="Round" MiterLimit="1" />
														</GeometryDrawing.Pen>
													</GeometryDrawing>
												</DrawingGroup>
											</DrawingImage.Drawing>
										</DrawingImage>
									</Image.Source>
								</Image>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.MouseOver.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.MouseOver.Foreground}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.Pressed.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.Pressed.Foreground}"/>
								</Trigger>
								<Trigger Property="Tag" Value="max">
									<Setter Property="ToolTip" Value="{DynamicResource Window.Tips.Restore}"/>
									<Setter TargetName="image" Property="Source">
										<Setter.Value>
											<DrawingImage>
												<DrawingImage.Drawing>
													<DrawingGroup ClipGeometry="M0,0 V24 H24 V0 H0 Z">
														<GeometryDrawing Geometry="F1 M24,24z M0,0z M3.842977,8.7435001C3.842977,7.8425224,4.573363,7.1121364,5.4743407,7.1121364L15.262523,7.1121364C16.163525,7.1121364,16.893886,7.8425224,16.893886,8.7435001L16.893886,18.531681C16.893886,19.432684,16.163525,20.163045,15.262523,20.163045L5.4743407,20.163045C4.573363,20.163045,3.842977,19.432684,3.842977,18.531681z M7.1061137,7.1121364L7.1061137,5.4683183C7.1061137,4.5673408,7.8364996,3.8369548,8.7374774,3.8369548L18.525659,3.8369548C19.426661,3.8369548,20.157023,4.5673408,20.157023,5.4683183L20.157023,15.256499C20.157023,16.157502,19.426661,16.887863,18.525659,16.887863L16.893886,16.887863">
															<GeometryDrawing.Pen>
																<Pen Brush="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Foreground}" Thickness="1.63136" StartLineCap="Round" EndLineCap="Round" LineJoin="Round" MiterLimit="1" />
															</GeometryDrawing.Pen>
														</GeometryDrawing>
													</DrawingGroup>
												</DrawingImage.Drawing>
											</DrawingImage>
										</Setter.Value>
									</Setter>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="WindowCloseButton" TargetType="{x:Type Button}">
				<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource WindowButton.Brushes.Foreground}"/>
				<Setter Property="ToolTip" Value="{DynamicResource Window.Tips.Close}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Grid Background="{TemplateBinding Background}" Height="32" Width="32" SnapsToDevicePixels="True">
								<Image Margin="10" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
									<Image.Source>
										<DrawingImage>
											<DrawingImage.Drawing>
												<DrawingGroup ClipGeometry="M0,0 V24 H24 V0 H0 Z">
													<GeometryDrawing Geometry="F1 M24,24z M0,0z M6,6L18,18 M18,6L6,18">
														<GeometryDrawing.Pen>
															<Pen Brush="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Foreground}" Thickness="2" StartLineCap="Round" EndLineCap="Round" LineJoin="Round" MiterLimit="1" />
														</GeometryDrawing.Pen>
													</GeometryDrawing>
												</DrawingGroup>
											</DrawingImage.Drawing>
										</DrawingImage>
									</Image.Source>
								</Image>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource WindowButton.Brushes.MouseOver.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource WindowCloseButton.Brushes.MouseOver.Foreground}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" Value="{DynamicResource WindowCloseButton.Brushes.Pressed.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource WindowCloseButton.Brushes.Pressed.Foreground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style TargetType="{x:Type elements:ImageButton}">
				<Setter Property="Background" Value="{DynamicResource Button.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Padding" Value="0"/>
				<Setter Property="ImageBrush" Value="{DynamicResource Icon.Brushes.Gray}"/>
				<Setter Property="ImageBrushHover" Value="{DynamicResource Icon.Brushes.MouseOver.Gray}"/>
				<Setter Property="ImageBrushDisabled" Value="{DynamicResource Icon.Brushes.Disabled.Gray}"/>
				<Setter Property="IconThickness" Value="1.5"/>
				<Setter Property="IconFill" Value="False"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type elements:ImageButton}">
							<Border x:Name="border" CornerRadius="{DynamicResource Button.CornerRadius}" SnapsToDevicePixels="true"
									Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
								<Path x:Name="path" Data="{TemplateBinding Icon}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"
									  Stroke="{TemplateBinding ImageBrush}" StrokeThickness="{TemplateBinding IconThickness}" Fill="Transparent"
									  StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeMiterLimit="1" Stretch="UniformToFill"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Background" Value="{DynamicResource Button.Brushes.Disabled.Background}"/>
									<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Disabled.Border}"/>
									<Setter Property="ImageBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ImageBrushDisabled}"/>
									<Setter Property="Opacity" Value="0.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource Button.Brushes.MouseOver.Background}"/>
									<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.MouseOver.Border}"/>
									<Setter Property="ImageBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ImageBrushHover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" Value="{DynamicResource Button.Brushes.Pressed.Background}"/>
									<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Pressed.Border}"/>
								</Trigger>
								<Trigger Property="IconFill" Value="True">
									<Setter TargetName="path" Property="Stroke" Value="Transparent"/>
									<Setter TargetName="path" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type elements:ImageButton}}, Path=ImageBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ImageTextButtonStyle" TargetType="{x:Type elements:ImageButton}">
				<Setter Property="Background" Value="{DynamicResource Button.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Padding" Value="0"/>
				<Setter Property="ImageBrush" Value="{DynamicResource Icon.Brushes.Gray}"/>
				<Setter Property="ImageBrushHover" Value="{DynamicResource Icon.Brushes.MouseOver.Gray}"/>
				<Setter Property="ImageBrushDisabled" Value="{DynamicResource Icon.Brushes.Disabled.Gray}"/>
				<Setter Property="IconThickness" Value="1.5"/>
				<Setter Property="IconFill" Value="False"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type elements:ImageButton}">
							<Border x:Name="border" CornerRadius="{DynamicResource Button.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
								<StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
									<Path x:Name="path" Data="{TemplateBinding Icon}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"
									  Stroke="{TemplateBinding ImageBrush}" StrokeThickness="{TemplateBinding IconThickness}" Fill="Transparent"
									  StrokeLineJoin="Round" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeMiterLimit="1" Stretch="UniformToFill"/>
									<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
								</StackPanel>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Background" Value="{DynamicResource Button.Brushes.Disabled.Background}"/>
									<Setter Property="Foreground" Value="{DynamicResource Button.Brushes.Foreground}"/>
									<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Disabled.Border}"/>
									<Setter Property="ImageBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ImageBrushDisabled}"/>
									<Setter Property="Opacity" Value="0.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource Button.Brushes.MouseOver.Background}"/>
									<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.MouseOver.Border}"/>
									<Setter Property="ImageBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ImageBrushHover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" Value="{DynamicResource Button.Brushes.Pressed.Background}"/>
									<Setter Property="BorderBrush" Value="{DynamicResource Button.Brushes.Pressed.Border}"/>
								</Trigger>
								<Trigger Property="IconFill" Value="True">
									<Setter TargetName="path" Property="Stroke" Value="Transparent"/>
									<Setter TargetName="path" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type elements:ImageButton}}, Path=ImageBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style TargetType="{x:Type Button}" BasedOn="{StaticResource MainButtonStyle}"/>
			<!--#endregion-->
			
			<!--#region Context Menu Style-->
			<MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
			<Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
			<Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
			<Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
			<Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>
			<Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
				<Setter Property="ClickMode" Value="Hover"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Border x:Name="templateRoot" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" SnapsToDevicePixels="true">
								<ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
				<Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
				<Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollViewer}">
							<Grid SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<Border Grid.Column="0" Grid.Row="1">
									<ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
								</Border>
								<RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
									<RepeatButton.Visibility>
										<MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
											<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										</MultiBinding>
									</RepeatButton.Visibility>
									<Path Data="{StaticResource UpArrow}" Fill="{DynamicResource Menu.Brushes.Border}"/>
								</RepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
									<RepeatButton.Visibility>
										<MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
											<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
											<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
										</MultiBinding>
									</RepeatButton.Visibility>
									<Path Data="{StaticResource DownArrow}" Fill="{DynamicResource Menu.Brushes.Border}"/>
								</RepeatButton>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
				<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
					<Grid VerticalAlignment="Center">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
						<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource Menu.Brushes.Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
						<ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Grid>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="Icon" Value="{x:Null}">
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsChecked" Value="true">
						<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsHighlighted" Value="True">
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
						<Setter Property="Opacity" Value="0.5"/>
						<Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsHighlighted" Value="True"/>
							<Condition Property="IsEnabled" Value="False"/>
						</MultiTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Disabled.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Disabled.Border}"/>
					</MultiTrigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
				<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
					<Grid VerticalAlignment="Center">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
						<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{TemplateBinding Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
						<ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" PlacementTarget="{Binding ElementName=templateRoot}">
							<Border x:Name="SubMenuBorder" Background="{DynamicResource Menu.Brushes.Background}" BorderBrush="{DynamicResource Menu.Brushes.Border}" BorderThickness="0" Padding="0">
								<ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
									<Grid RenderOptions.ClearTypeHint="Enabled">
										<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
										</Canvas>
										<Rectangle Fill="{DynamicResource Menu.Brushes.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
									</Grid>
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="IsSuspendingPopupAnimation" Value="true">
						<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
					</Trigger>
					<Trigger Property="Icon" Value="{x:Null}">
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsChecked" Value="true">
						<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsHighlighted" Value="True">
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
						<Setter Property="Opacity" Value="0.5"/>
						<Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
					</Trigger>
					<Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
						<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
						<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
				<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
					<Grid Margin="-1">
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
							<ColumnDefinition Width="13"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="30"/>
							<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
							<ColumnDefinition Width="20"/>
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
						<Border x:Name="GlyphPanel" Background="{DynamicResource MenuItem.Brushes.Selected.Background}" BorderBrush="{DynamicResource MenuItem.Brushes.Selected.Border}" BorderThickness="0" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
							<Path x:Name="Glyph" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource Menu.Brushes.Foreground}" Height="11" Width="10"/>
						</Border>
						<ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
						<TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
					</Grid>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="Icon" Value="{x:Null}">
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsChecked" Value="True">
						<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsHighlighted" Value="True">
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
						<Setter Property="Opacity" Value="0.5"/>
						<Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsHighlighted" Value="True"/>
							<Condition Property="IsEnabled" Value="False"/>
						</MultiTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Disabled.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Disabled.Border}"/>
					</MultiTrigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
				<Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
					<Grid Margin="-1">
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
							<ColumnDefinition Width="13"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="30"/>
							<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
							<ColumnDefinition Width="20"/>
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
						<Border x:Name="GlyphPanel" Background="{DynamicResource MenuItem.Brushes.Highlight.Background}" BorderBrush="{DynamicResource MenuItem.Brushes.Highlight.Border}" BorderThickness="0" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
							<Path x:Name="Glyph" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource Menu.Brushes.Foreground}" Height="11" Width="9"/>
						</Border>
						<ContentPresenter ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
						<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
						<Path x:Name="RightArrow" Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{DynamicResource Menu.Brushes.Border}" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
						<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
							<Border x:Name="SubMenuBorder" Background="{DynamicResource Menu.Brushes.Background}" BorderBrush="{DynamicResource Menu.Brushes.Border}" BorderThickness="0" Padding="0">
								<ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
									<Grid RenderOptions.ClearTypeHint="Enabled">
										<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
											<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
										</Canvas>
										<Rectangle Fill="{DynamicResource Menu.Brushes.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
									</Grid>
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="IsSuspendingPopupAnimation" Value="true">
						<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
					</Trigger>
					<Trigger Property="Icon" Value="{x:Null}">
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsChecked" Value="True">
						<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
						<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
					</Trigger>
					<Trigger Property="IsHighlighted" Value="True">
						<Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Brushes.Highlight.Border}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
						<Setter Property="Opacity" Value="0.5"/>
						<Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
						<Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource Menu.Brushes.Disabled.Foreground}"/>
					</Trigger>
					<Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
						<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
						<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<Style TargetType="{x:Type MenuItem}">
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
				<Style.Triggers>
					<Trigger Property="Role" Value="TopLevelHeader">
						<Setter Property="Background" Value="Transparent"/>
						<Setter Property="BorderBrush" Value="Transparent"/>
						<Setter Property="Foreground" Value="{DynamicResource Menu.Brushes.Foreground}"/>
						<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
						<Setter Property="Padding" Value="6,0"/>
					</Trigger>
					<Trigger Property="Role" Value="TopLevelItem">
						<Setter Property="Background" Value="{DynamicResource Menu.Brushes.Background}"/>
						<Setter Property="BorderBrush" Value="{DynamicResource Menu.Brushes.Border}"/>
						<Setter Property="Foreground" Value="{DynamicResource Menu.Brushes.Foreground}"/>
						<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
						<Setter Property="Padding" Value="6,0"/>
					</Trigger>
					<Trigger Property="Role" Value="SubmenuHeader">
						<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
				<Setter Property="HasDropShadow" Value="True"/>
				<Setter Property="Foreground" Value="{DynamicResource ContextMenu.Brushes.Foreground}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ContextMenu}">
							<Border
								Background="{DynamicResource ContextMenu.Brushes.Background}"
								CornerRadius="{DynamicResource ContextMenu.CornerRadius}" 
								BorderThickness="2"
								Padding="0,5,0,5">
								<Border.Effect>
									<DropShadowEffect Direction="0" ShadowDepth="0" BlurRadius="5" Color="Gray"/>
								</Border.Effect>
								<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource ContextMenuStyle}"/>
			<!--#endregion-->
			
			<!--#region Scrollbar Style-->
			<Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
				<Setter Property="Width" Value="8"/>
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Border x:Name="rectangle" Background="{DynamicResource ScrollBarThumb.Brushes.Background}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" CornerRadius="{DynamicResource Scrollbar.CornerRadius}"/>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="rectangle" Value="{DynamicResource ScrollBarThumb.Brushes.MouseOver.Background}"/>
								</Trigger>
								<Trigger Property="IsDragging" Value="true">
									<Setter Property="Background" TargetName="rectangle" Value="{DynamicResource ScrollBarThumb.Brushes.Dragging.Background}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
				<Setter Property="Background" Value="AliceBlue"/>
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Border x:Name="rectangle" Background="{DynamicResource ScrollBarThumb.Brushes.Background}" 
									Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" 
									SnapsToDevicePixels="True" CornerRadius="{DynamicResource Scrollbar.CornerRadius}"/>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="rectangle" Value="{DynamicResource ScrollBarThumb.Brushes.MouseOver.Background}"/>
								</Trigger>
								<Trigger Property="IsDragging" Value="true">
									<Setter Property="Background" TargetName="rectangle" Value="{DynamicResource ScrollBarThumb.Brushes.Dragging.Background}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type ScrollBar}">
				<Setter Property="Background" Value="{DynamicResource ScrollBar.Brushes.Background}"/>
				<Style.Triggers>
					<Trigger Property="Orientation" Value="Horizontal">
						<Setter Property="Width" Value="5"/>
						<Setter Property="MinWidth" Value="1"/>
						<Setter Property="Height" Value="8"/>
						<Setter Property="MinHeight" Value="8"/>
						<Setter Property="MaxHeight" Value="10"/>
						<Setter Property="BorderThickness" Value="1"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ScrollBar}">
									<Grid x:Name="Bg" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
										<Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
											<Track.DecreaseRepeatButton>
												<RepeatButton Background="{TemplateBinding Background}"
															  Command="{x:Static ScrollBar.PageLeftCommand}" 
															  Style="{StaticResource RepeatButtonTransparent}"/>
											</Track.DecreaseRepeatButton>
											<Track.IncreaseRepeatButton>
												<RepeatButton Background="{TemplateBinding Background}"
															  Command="{x:Static ScrollBar.PageRightCommand}"
															  Style="{StaticResource RepeatButtonTransparent}"/>
											</Track.IncreaseRepeatButton>
											<Track.Thumb>
												<Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
											</Track.Thumb>
										</Track>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>

					<Trigger Property="Orientation" Value="Vertical">
						<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
						<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
						<Setter Property="BorderBrush" Value="{DynamicResource ScrollBar.Brushes.Border}"/>
						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
						<Setter Property="BorderThickness" Value="1,0"/>
						<Setter Property="Width" Value="12"/>
						<Setter Property="MinWidth" Value="12"/>
						<Setter Property="MaxWidth" Value="12"/>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ScrollBar}">
									<Border x:Name="Bg" SnapsToDevicePixels="true">
										<Track x:Name="PART_Track" IsDirectionReversed="true"
											   IsEnabled="{TemplateBinding IsMouseOver}">
											<Track.DecreaseRepeatButton>
												<RepeatButton Background="{TemplateBinding Background}"
															  Command="{x:Static ScrollBar.PageUpCommand}" 
															  Style="{StaticResource RepeatButtonTransparent}"/>
											</Track.DecreaseRepeatButton>

											<Track.IncreaseRepeatButton>
												<RepeatButton Background="{TemplateBinding Background}"
															  Command="{x:Static ScrollBar.PageDownCommand}" 
															  Style="{StaticResource RepeatButtonTransparent}"/>
											</Track.IncreaseRepeatButton>

											<Track.Thumb>
												<Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
											</Track.Thumb>
										</Track>
									</Border>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->
			
			<!--#region Grid Styles-->
			<Style TargetType="{x:Type GridViewColumnHeader}">
				<Setter Property="Background" Value="{DynamicResource GridViewColumnHeader.Brushes.Background}"/>
				<Setter Property="Height" Value="22"/>
				<Setter Property="MinWidth" Value="30"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
							<Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource GridViewColumnHeader.Brushes.Border}">
								<Grid Background="{TemplateBinding Background}" MinWidth="{TemplateBinding MinWidth}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="2"/>
									</Grid.ColumnDefinitions>
									<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
									<Thumb x:Name="PART_HeaderGripper" Grid.Column="1"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource GridViewColumnHeader.Brushes.MouseOver.Background}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="Role" Value="Padding">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="GridViewColumnHeader">
									<Border Background="{TemplateBinding Background}" Margin="0,0,-2,0" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource GridViewColumnHeader.Brushes.Border}"/>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->
						
			<!--#region Data Grid Style-->
			<Style TargetType="{x:Type DataGrid}">
				<Setter Property="Background" Value="{DynamicResource DataGrid.Brushes.Background}"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="FontSize" Value="12"/>
				<Setter Property="CanUserResizeRows" Value="False"/>
				<Setter Property="VerticalGridLinesBrush" Value="{DynamicResource DataGrid.Brushes.Border}"/>
				<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource DataGrid.Brushes.Border}"/>
			</Style>
			<Style TargetType="{x:Type DataGridColumnHeader}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="BorderBrush" Value="{DynamicResource DataGrid.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="0,0,1,1"/>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Background" Value="{DynamicResource DataGrid.Brushes.Border}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="{ComponentResourceKey ResourceId=DataGridCommonStrings.SelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
				TargetType="{x:Type Button}">
				<Setter Property="Background" Value="{DynamicResource DataGridRowHeader.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource DataGrid.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="0,0,1,1"/>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="{DynamicResource DataGridRowHeader.Brushes.MouseOver.Background}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style TargetType="{x:Type DataGridRowHeader}">
				<Setter Property="Visibility" Value="Visible"/>
				<Setter Property="Width" Value="20"/>
				<Setter Property="Background" Value="{DynamicResource DataGridRowHeader.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource  DataGrid.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="0,0,1,1"/>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Background" Value="{DynamicResource DataGridRowHeader.Brushes.MouseOver.Background}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style TargetType="{x:Type DataGridRow}">
				<Style.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{DynamicResource Colors.Text}"/>
				</Style.Resources>
				<Setter Property="Background" Value="{DynamicResource DataGridRow.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource DataGridRow.Brushes.Foreground}"/>
			</Style>
			<Style TargetType="{x:Type DataGridCell}">
				<Style.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="{DynamicResource Colors.Hover}"/>
					<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="{DynamicResource Colors.Text}"/>
				</Style.Resources>
				<Setter Property="Background" Value="{DynamicResource DataGridCell.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource DataGridCell.Brushes.Foreground}"/>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="{DynamicResource DataGridCell.Brushes.MouseOver.Background}"/>
					</Trigger>
					<Trigger Property="IsSelected" Value="True">
						<Setter Property="Background" Value="{DynamicResource DataGridCell.Brushes.Selected.Background}"/>
						<Setter Property="BorderBrush" Value="{DynamicResource DataGridCell.Brushes.Selected.Border}"/>
					</Trigger>
					<Trigger Property="IsEditing" Value="True">
						<Setter Property="Background" Value="{DynamicResource DataGridCell.Brushes.Editing.Background}"/>
					</Trigger>
				</Style.Triggers>
			</Style>
			<!--#endregion-->
			
			<!--#region TreeView Style-->
			<Style TargetType="{x:Type TreeView}">
				<Setter Property="Background" Value="{DynamicResource TreeView.Brushes.Background}"/>
			</Style>

			<Style TargetType="{x:Type TreeViewItem}">
				<Setter Property="Background" Value="{DynamicResource TreeViewItem.Brushes.Background}"/>
				<Setter Property="Foreground" Value="{DynamicResource TreeViewItem.Brushes.Foreground}"/>
			</Style>
			<!--#endregion-->
			
			<!--#region Radio Button Style-->
			<Style x:Key="OptionMarkFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource CheckBox.Brushes.Background}" SnapsToDevicePixels="true" StrokeThickness="1"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type RadioButton}">
				<Setter Property="Background" Value="{DynamicResource RadioButton.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource RadioButton.Brushes.Border}"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RadioButton}">
							<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<Grid x:Name="markGrid" Margin="2">
										<Ellipse x:Name="optionMark" Fill="{DynamicResource RadioButton.Brushes.Mark}" MinWidth="8" MinHeight="8" Opacity="0"/>
									</Grid>
								</Border>
								<ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="true">
									<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
									<Setter Property="Padding" Value="4,-1,0,0"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Brushes.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Brushes.MouseOver.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Brushes.MouseOver.Mark}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Brushes.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Brushes.Disabled.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Brushes.Disabled.Mark}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Brushes.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Brushes.Pressed.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Brushes.Pressed.Mark}"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
			
			<!--#region CheckBox Style-->
			<Style x:Key="FocusVisual1">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource CheckBox.Brushes.Background}" SnapsToDevicePixels="true" StrokeThickness="1"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="OptionMarkFocusVisual1">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource CheckBox.Brushes.Background}" SnapsToDevicePixels="true" StrokeThickness="1"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type CheckBox}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual1}"/>
				<Setter Property="Background" Value="{DynamicResource CheckBox.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource CheckBox.Brushes.Border}"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<Grid x:Name="markGrid">
										<Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{DynamicResource CheckBox.Brushes.Mark}" Margin="1" Opacity="0" Stretch="None"/>
										<Rectangle x:Name="indeterminateMark" Fill="{DynamicResource CheckBox.Brushes.Mark}" Margin="2" Opacity="0"/>
									</Grid>
								</Border>
								<ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="true">
									<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual1}"/>
									<Setter Property="Padding" Value="4,-1,0,0"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource CheckBox.Brushes.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource CheckBox.Brushes.MouseOver.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckBox.Brushes.MouseOver.Mark}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckBox.Brushes.MouseOver.Mark}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource CheckBox.Brushes.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource CheckBox.Brushes.Disabled.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckBox.Brushes.Disabled.Mark}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckBox.Brushes.Disabled.Mark}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource CheckBox.Brushes.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource CheckBox.Brushes.Pressed.Border}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckBox.Brushes.Pressed.Mark}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckBox.Brushes.Pressed.Mark}"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0"/>
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
				
			<!--#region Groupbox Style-->
			<Style TargetType="{x:Type GroupBox}">
				<Setter Property="Background" Value="{DynamicResource GroupBox.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource GroupBox.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value=".5"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GroupBox}">
							<Grid SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="6"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="6"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
									<RowDefinition Height="6"/>
								</Grid.RowDefinitions>
								<Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.Column="0" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1"/>
								<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1">
									<Border.OpacityMask>
										<MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
											<Binding ElementName="Header" Path="ActualWidth"/>
											<Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
											<Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
										</MultiBinding>
									</Border.OpacityMask>
									<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
										<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
									</Border>
								</Border>
								<Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.RowSpan="2" Grid.Row="0">
									<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</Border>
								<ContentPresenter Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="BorderBrush" Value="{DynamicResource GroupBox.Brushes.MouseOver.Border}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
			
			<!--#region Progress Bar-->
			<Style TargetType="{x:Type ProgressBar}">
				<Setter Property="Foreground" Value="{DynamicResource ProgressBar.Brushes.Progress}"/>
				<Setter Property="Background" Value="{DynamicResource ProgressBar.Brushes.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource ProgressBar.Brushes.Border}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ProgressBar}">
							<Grid x:Name="TemplateRoot">
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Determinate"/>
										<VisualState x:Name="Indeterminate">
											<Storyboard RepeatBehavior="Forever">
												<DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
													<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
													<EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
													<EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
												</DoubleAnimationUsingKeyFrames>
												<PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
													<EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
													<EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
													<EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
												</PointAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ProgressBar.CornerRadius}"/>
								<Rectangle x:Name="PART_Track"/>
								<Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
									<Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
									<Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
										<Rectangle.RenderTransform>
											<TransformGroup>
												<ScaleTransform/>
												<SkewTransform/>
												<RotateTransform/>
												<TranslateTransform/>
											</TransformGroup>
										</Rectangle.RenderTransform>
									</Rectangle>
								</Grid>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="Orientation" Value="Vertical">
									<Setter Property="LayoutTransform" TargetName="TemplateRoot">
										<Setter.Value>
											<RotateTransform Angle="-90"/>
										</Setter.Value>
									</Setter>
								</Trigger>
								<Trigger Property="IsIndeterminate" Value="true">
									<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->

			<!--#region Main Window-->
			<Style x:Key="SAWindow" TargetType="{x:Type Window}">
				<Setter Property="Background" Value="{DynamicResource Window.Brushes.Background}"/>
				<Setter Property="WindowStyle" Value="SingleBorderWindow"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Window.Brushes.Border}"/>
                <Setter Property="WindowChrome.WindowChrome">
					<Setter.Value>
						<WindowChrome 
							CaptionHeight="22"
							CornerRadius="8"
							GlassFrameThickness="0,0,0,1"
							NonClientFrameEdges="None"
							UseAeroCaptionButtons="False"
							ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"/>
					</Setter.Value>
				</Setter>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Window}">
							<Grid>
								<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
									<Grid Background="{TemplateBinding Background}">
										<Grid.RowDefinitions>
											<RowDefinition Height="32"/>
											<RowDefinition Height="*"/>
										</Grid.RowDefinitions>

										<Grid Grid.Row="0">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto"/>
												<ColumnDefinition Width="*"/>
												<ColumnDefinition Width="Auto"/>
											</Grid.ColumnDefinitions>

											<Image x:Name="IconTitleBar" Grid.Column="0" Source="Icons/SADXModManager_.png" Margin="0,0,5,5"/>
											<TextBlock Text="{TemplateBinding Title}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center"/>
											<StackPanel Grid.Column="2" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
												<Button Style="{DynamicResource WindowMinButton}" x:Name="ButtonMinimize" Click="MinimizeWindow"/>
												<Button Style="{DynamicResource WindowMaxButton}" x:Name="ButtonMaximize" Click="MaximizeWindow" Tag="reg"/>
												<Button Style="{DynamicResource WindowCloseButton}" x:Name="ButtonClose" Click="CloseWindow"/>
											</StackPanel>
											</Grid>
										<ContentPresenter Grid.Row="1"/>
									</Grid>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsActive" Value="False">
									<Setter Property="BorderBrush" Value="{DynamicResource Window.Brushes.Inactive.Border}"/>
								</Trigger>
								<Trigger Property="WindowState" Value="Maximized">
									<Setter TargetName="ButtonMaximize" Property="Tag" Value="max"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="SAWindowUtil" TargetType="{x:Type Window}">
				<Setter Property="Background" Value="{DynamicResource Window.Brushes.Background}"/>
				<Setter Property="WindowStyle" Value="SingleBorderWindow"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Window.Brushes.Border}"/>
                <Setter Property="WindowChrome.WindowChrome">
					<Setter.Value>
						<WindowChrome 
							CaptionHeight="22"
							CornerRadius="8"
							GlassFrameThickness="0,0,0,1"
							NonClientFrameEdges="None"
							UseAeroCaptionButtons="False"
							ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"/>
					</Setter.Value>
				</Setter>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Window}">
							<Grid>
								<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
									<Grid Background="{TemplateBinding Background}">
										<Grid.RowDefinitions>
											<RowDefinition Height="32"/>
											<RowDefinition Height="*"/>
										</Grid.RowDefinitions>

										<Grid Grid.Row="0">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto"/>
												<ColumnDefinition Width="*"/>
												<ColumnDefinition Width="Auto"/>
											</Grid.ColumnDefinitions>

                                            <Image Grid.Column="0" x:Name="IconTitleBar2" Source="Icons/SADXModManager_.png" Margin="0,0,5,5"/>
											<TextBlock Text="{TemplateBinding Title}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center"/>
											<StackPanel Grid.Column="2" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
												<Button Style="{DynamicResource WindowCloseButton}" x:Name="ButtonClose" Click="CloseWindow"/>
											</StackPanel>
										</Grid>
										<ContentPresenter Grid.Row="1"/>
									</Grid>
								</Border>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
			
			<!--#region Expander-->
			<Style x:Key="ExpanderHeaderFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Border>
								<Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="19"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<Ellipse x:Name="circle" Fill="{DynamicResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
									<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="19"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<Grid>
										<Grid.LayoutTransform>
											<TransformGroup>
												<TransformGroup.Children>
													<TransformCollection>
														<RotateTransform Angle="180"/>
													</TransformCollection>
												</TransformGroup.Children>
											</TransformGroup>
										</Grid.LayoutTransform>
										<Ellipse x:Name="circle" Fill="{DynamicResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
										<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									</Grid>
									<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="19"/>
										<RowDefinition Height="*"/>
									</Grid.RowDefinitions>
									<Grid>
										<Grid.LayoutTransform>
											<TransformGroup>
												<TransformGroup.Children>
													<TransformCollection>
														<RotateTransform Angle="90"/>
													</TransformCollection>
												</TransformGroup.Children>
											</TransformGroup>
										</Grid.LayoutTransform>
										<Ellipse x:Name="circle" Fill="{DynamicResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
										<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									</Grid>
									<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}">
								<Grid Background="Transparent" SnapsToDevicePixels="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="19"/>
										<RowDefinition Height="*"/>
									</Grid.RowDefinitions>
									<Grid>
										<Grid.LayoutTransform>
											<TransformGroup>
												<TransformGroup.Children>
													<TransformCollection>
														<RotateTransform Angle="-90"/>
													</TransformCollection>
												</TransformGroup.Children>
											</TransformGroup>
										</Grid.LayoutTransform>
										<Ellipse x:Name="circle" Fill="{DynamicResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{DynamicResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
										<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
									</Grid>
									<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
									<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
									<Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
									<Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			
			<Style TargetType="{x:Type Expander}">
				<Setter Property="Foreground" Value="{DynamicResource Expander.Static.Foreground}"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
				<Setter Property="VerticalContentAlignment" Value="Stretch"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Expander}">
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
								<DockPanel>
									<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
									<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
								</DockPanel>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="true">
									<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Right">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Up">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Left">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
			<!--#endregion-->
		</ResourceDictionary>

	</Application.Resources>
</Application>
